service: spark-innovation-platform

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    DATABASE_URL: ${env:DATABASE_URL}
    JWT_SECRET: ${env:JWT_SECRET}
    FRONTEND_URL: ${env:FRONTEND_URL}
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource: 'arn:aws:s3:::${self:custom.s3Bucket}/*'
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'

custom:
  s3Bucket: spark-platform-uploads-${self:provider.stage}
  serverless-offline:
    httpPort: 3000
  prune:
    automatic: true
    includeLayers: true
    number: 3

functions:
  api:
    handler: dist/lambda.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: ${env:FRONTEND_URL, 'http://localhost:3001'}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
    timeout: 30
    memorySize: 512

  websocket:
    handler: dist/websocket.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default

  scheduled-tasks:
    handler: dist/scheduled.handler
    events:
      - schedule:
          rate: rate(1 hour)
          enabled: true

resources:
  Resources:
    S3BucketUploads:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, POST, DELETE]
              AllowedOrigins: ['*']
              MaxAge: 3000

plugins:
  - serverless-offline
  - serverless-plugin-typescript
  - serverless-prune-plugin